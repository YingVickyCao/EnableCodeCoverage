apply plugin: 'com.android.library'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"


    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'

            jacoco {
                includeNoLocationClasses = true
                destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
                classDumpDir = file("$buildDir/jacoco/classpathdumps")
                excludes = ['jdk.internal.*']
            }

            finalizedBy 'jacocoTestReport'
        }

        unitTests {
            includeAndroidResources = false
        }
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.12'
}

//jacoco {
//    // 0.7.9
//    version = "0.8.4"
//}


final capVariant = "Debug";
//task jacocoTestReport(name: 'jacocoTestReport', type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
task jacocoTestReport(name: 'jacocoTestReport', type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

//    def mainSrc = "${project.projectDir}/src/main/java/com/github/yingvickycao/androidlib"
////    def testSrc = "${project.projectDir}/src/test/java/com/github/yingvickycao/androidlib"
////    def androidTestSrc = "${project.projectDir}/src/androidTest/java/com/github/yingvickycao/androidlib"
//
////    def executionData_includes = ["jacoco/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/*coverage.ec"]
//    def executionData_includes = ["$buildDir/jacoco/testDebugUnitTest.exec", "$buildDir/reports/coverage/debug/report.xml", "$buildDir/outputs/code-coverage/connected/initmvp_coverage.ec"]
//
//    def classDirectories_excludes = ['**/R.class',
//                                     '**/R$*.class',
//                                     '**/BuildConfig.*',
//                                     '**/Manifest*.*',
//                                     '**/Lambda$*.class',
//                                     '**/Lambda.class',
//                                     '**/*Lambda.class',
//                                     '**/*Lambda*.class',
//                                     '**/*Test*.*',
//                                     '**/*$ViewBinder*.*',
//                                     '**/*$ViewInjector*.*',
//                                     'android/**/*.*',
//                                     '**/*Activity.*',
//                                     '**/*Fragment.*',
//                                     'jdk.internal.*']
//    def java_classes = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: classDirectories_excludes);
//    def kotlin_classes = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: classDirectories_excludes);
//
//    getSourceDirectories().setFrom(files([mainSrc]))
//    getExecutionData().setFrom(files(executionData_includes))
//    getClassDirectories().setFrom(files([java_classes, kotlin_classes]))

    reports {
        xml.enabled = true
        xml.destination = file("$buildDir/reports/jacoco/jacocoTestReport.xml")

        csv.enabled false
        html.enabled true
        html.destination = file("$buildDir/reports/html")
    }

}
//
//plugins.withType(JacocoPlugin){
//    tasks['unitTests'].finalizedBy 'jacocoTestReport'
//}

/**
 * // org.jacoco/org.jacoco.agent/0.8.4/869021a6d90cfb008b12e83fccbe42eca29e5355/org.jacoco.agent-0.8.4-runtime.jar:/Use" +
 * // org.jacoco.agent-0.8.4-runtime.jar
 * "/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home/bin/java"
 *
 *
 *         ---- IntelliJ IDEA coverage runner ----
 *         sampling ...
 *         include patterns:
 */