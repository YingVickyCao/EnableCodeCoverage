apply plugin: 'com.android.library'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
        }
        unitTests {
            includeAndroidResources = true
        }

        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


final capVariant = "Debug";
task jacocoTestReport(name: 'jacocoTestReport', type: JacocoReport, dependsOn: "test${capVariant}UnitTest") {
    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco")

        csv.enabled false
        html.enabled false
//        html.destination file("${buildDir}/reports/html")
    }

    def mainSrc = "${project.projectDir}/src/main/java/com/github/yingvickycao/enablecodecoverage"
//    def testSrc = "${project.projectDir}/src/test/java/com/github/yingvickycao/enablecodecoverage"
//    def androidTestSrc = "${project.projectDir}/src/androidTest/java/com/github/yingvickycao/enablecodecoverage"

//    def executionData_includes = ["jacoco/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/*coverage.ec"]
    def executionData_includes = ["$buildDir/jacoco/testDebugUnitTest.exec", "$buildDir/reports/coverage/debug/report.xml", "$buildDir/outputs/code-coverage/connected/initmvp_coverage.ec"]

    def classDirectories_excludes = ['**/R.class',
                                     '**/R$*.class',
                                     '**/BuildConfig.*',
                                     '**/Manifest*.*',
                                     '**/Lambda$*.class',
                                     '**/Lambda.class',
                                     '**/*Lambda.class',
                                     '**/*Lambda*.class',
                                     '**/*Test*.*',
                                     '**/*$ViewBinder*.*',
                                     '**/*$ViewInjector*.*',
                                     'android/**/*.*',
                                     '**/*Activity.*',
                                     '**/*Fragment.*',
                                     'jdk.internal.*']
    def java_classes = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: classDirectories_excludes);
    def kotlin_classes = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: classDirectories_excludes);

    getSourceDirectories().setFrom(files([mainSrc]))
    getExecutionData().setFrom(files(executionData_includes))
    getClassDirectories().setFrom(files([java_classes, kotlin_classes]))
}