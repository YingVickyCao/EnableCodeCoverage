apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.github.yingvickycao.enablecodecoverage"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            testCoverageEnabled = true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

//    logger.error("jacoco version=" + jacoco.version)

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'

            jacoco {
                includeNoLocationClasses = true
                destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
                classDumpDir = file("$buildDir/jacoco/classpathdumps")
                excludes = ['jdk.internal.*']
            }

            finalizedBy 'jacocoTestReport'
        }

        unitTests {
            includeAndroidResources = true
        }
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":javaLib")
    implementation project(':androidLib')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


final capVariant = "Debug";
//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
task jacocoTestReport(name: 'jacocoTestReport', type: JacocoReport, dependsOn: "test${capVariant}UnitTest") {
    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco")

        csv.enabled false
        html.enabled false
        html.destination file("${buildDir}/reports/html")
    }

    def mainSrc = "${project.projectDir}/src/main/java/com/github/yingvickycao/enablecodecoverage"
//    def testSrc = "${project.projectDir}/src/test/java/com/github/yingvickycao/enablecodecoverage"
//    def androidTestSrc = "${project.projectDir}/src/androidTest/java/com/github/yingvickycao/enablecodecoverage"

//    def executionData_includes = ["jacoco/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/*coverage.ec"]
    def executionData_includes = ["$buildDir/jacoco/testDebugUnitTest.exec", "$buildDir/reports/coverage/debug/report.xml", "$buildDir/outputs/code-coverage/connected/initmvp_coverage.ec"]

    def classDirectories_excludes = ['**/R.class',
                                     '**/R$*.class',
                                     '**/BuildConfig.*',
                                     '**/Manifest*.*',
                                     '**/Lambda$*.class',
                                     '**/Lambda.class',
                                     '**/*Lambda.class',
                                     '**/*Lambda*.class',
                                     '**/*Test*.*',
                                     '**/*$ViewBinder*.*',
                                     '**/*$ViewInjector*.*',
                                     'android/**/*.*',
                                     '**/*Activity.*',
                                     '**/*Fragment.*',
                                     'jdk.internal.*']
    def java_classes = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: classDirectories_excludes);
    def kotlin_classes = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: classDirectories_excludes);

//    getSourceDirectories().setFrom(files([mainSrc]))
//    getExecutionData().setFrom(files(executionData_includes))
//    getClassDirectories().setFrom(files([java_classes, kotlin_classes]))
}

//task jacocoTestCoverageVerification(name: 'jacocoTestCoverageVerification', type: JacocoCoverageVerification, dependsOn: ["test${capVariant}UnitTest"])
//task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
//    group = "Reporting"
//    violationRules {
//        rule {
//            limit {
//                minimum = 0.5
//            }
//        }
//
//        rule {
//            enabled = false
//
//
//            element = 'CLASS'
//            includes = ['com.github.yingvickycao.enablecodecoverage']
//
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 0.3
//            }
//        }
//    }
//}
