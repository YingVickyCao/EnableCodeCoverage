apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.github.yingvickycao.enablecodecoverage"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled = true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    jacoco {
        // 0.7.9
        version = "0.8.4"
    }

    logger.error("jacoco version=" + jacoco.version)

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
                classDumpDir = file("$buildDir/jacoco/classpathdumps")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":javaLib");
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

jacoco {
    toolVersion "0.8.4"
}

final capVariant = "Debug";
task jacocoTestReport(name: 'jacocoTestReport', type: JacocoReport, dependsOn: "test${capVariant}UnitTest")
task jacocoTestCoverageVerification(name: 'jacocoTestCoverageVerification', type: JacocoCoverageVerification, dependsOn: ["test${capVariant}UnitTest", "create${capVariant}CoverageReport"])

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
//        html.enabled true
        html {
            enabled true
        }

        // TODO: not generate html dir
        html.destination file("${buildDir}/reports/html")
//        xml.destination file("${buildDir}/reports/xmlReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false


            element = 'CLASS'
            includes = ['com.github.yingvickycao.enablecodecoverage']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}