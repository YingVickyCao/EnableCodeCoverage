apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

//apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

android {
    signingConfigs {
        release {
            storeFile file('$rootProject.projectDir/debug_key.jks')
            storePassword '123456'
            keyAlias 'debug_key'
            keyPassword '123456'
        }
    }
    compileSdkVersion 31
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.github.yingvickycao.enablecodecoverage"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            testCoverageEnabled = true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_11
    }

//    logger.error("jacoco version=" + jacoco.version)

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'

            jacoco {
                includeNoLocationClasses = true
                destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
                classDumpDir = file("$buildDir/jacoco/classpathdumps")
                excludes = ['jdk.internal.*']
            }

            finalizedBy 'jacocoTestReport'
        }

        unitTests {
            includeAndroidResources = false
            returnDefaultValues = true
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":javaLib")
    implementation project(':androidLib')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}


//final capVariant = "Debug";
//task jacocoTestReport(type: JacocoReport, dependsOn: ['test${capVariant}UnitTest', 'createDebugCoverageReport']) {
task jacocoTestReport(name: 'jacocoTestReport', type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled true
//        csv.enabled true
        html.enabled true
    }

    def sourceDirectories_java = "${project.projectDir}/src/main/java"
    def executionData_includes = ["$buildDir/jacoco/jacocoTest.exec"]

    def classDirectories_excludes = ['**/R.class',
                                     '**/R$*.class',
                                     '**/BuildConfig.*',
                                     '**/Manifest*.*',
                                     '**/Lambda$*.class',
                                     '**/Lambda.class',
                                     '**/*Lambda.class',
                                     '**/*Lambda*.class',
                                     '**/*Test*.*',
                                     '**/*$ViewBinder*.*',
                                     '**/*$ViewInjector*.*',
                                     'android/**/*.*',
                                     '**/*Activity.*',
                                     '**/*Activity.class',
                                     '**/*Fragment.*']
    def classDirectories_java = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes/", excludes: classDirectories_excludes);
    def classDirectories_kotlin = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/", excludes: classDirectories_excludes);

    getClassDirectories().from([classDirectories_java, classDirectories_kotlin])
    getSourceDirectories().from([sourceDirectories_java])
//    additionalSourceDirs = files([sourceDirectories_java]) // add pre/after, no changes
    getExecutionData().from(executionData_includes)  // raw coverage data file
}